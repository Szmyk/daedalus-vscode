<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>d</string>
	</array>
	
	<key>foldingStartMarker</key>
	<string>(?x)
		 /\*\*(?!\*)
		|^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
	</string>
	<key>foldingStopMarker</key>
	<string>(?&lt;!\*)\*\*/|^\s*\}</string>
	<key>name</key>
	<string>Daedalus</string>
	<key>patterns</key>
	<array>
		<dict> <!-- Comments -->
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.block.daedalus</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^/\* =(\s*.*?)\s*= \*/$\n?</string>
					<key>name</key>
					<string>comment.block.daedalus</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.daedalus</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*/.*\n</string>
					<key>name</key>
					<string>invalid.illegal.stray-comment-end.daedalus</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.line.daedalus</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^// =(\s*.*?)\s*=\s*$\n?</string>
					<key>name</key>
					<string>comment.line.banner.daedalus</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.daedalus</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.daedalus</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.daedalus</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		
		<dict> <!-- Numbers -->
			<key>patterns</key>
			<array>
				<dict>
				<key>match</key>
				<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
				<key>name</key>
				<string>constant.numeric.daedalus</string>
				</dict>
			</array>
		</dict>

		<dict> <!-- Keywords -->
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(float|string|int|void)\b</string>
					<key>name</key>
					<string>storage.type.daedalus</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(class|instance|prototype)\b</string>
					<key>name</key>
					<string>storage.type.structure.daedalus</string>
				</dict>	
				<dict>
					<key>match</key>
					<string>\b(const|var)\b</string>
					<key>name</key>
					<string>storage.modifier.daedalus</string>
				</dict>		
				<dict>
					<key>match</key>
					<string>\b(func|NULL|null)\b</string>
					<key>name</key>
					<string>keyword.daedalus</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(true|false)\b</string>
					<key>name</key>
					<string>constant.language.boolean.daedalus</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(return|if|else)\b</string>
					<key>name</key>
					<string>keyword.control.daedalus</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(if|else)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.daedalus</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(return)\b</string>
					<key>name</key>
					<string>keyword.control.statement.daedalus</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(self|other|hero)\b</string>
					<key>name</key>
					<string>variable.daedalus</string>
				</dict>
			</array>
		</dict>

		<dict> <!-- Strings -->
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.daedalus</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.daedalus</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.daedalus</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.function-call.leading.daedalus</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.any-method.daedalus</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.daedalus</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x) (?: (?= \s )  (?:(?&lt;=else|return) | (?&lt;!\w)) (\s+))?
			(\b
			(?!(if|else|return)\s*\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\b | :: )++                  # actual name
			)
			\s*(\()
			</string>
			<key>name</key>
			<string>meta.function-call.daedalus</string>
		</dict>

		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.daedalus</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.daedalus</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
			(?x)
			(?:
			(?: (?= \s )           (?&lt;!else|return) (?&lt;=\w)\s+      #  or word + space before name
			)
			)
			(
				(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name
				(?: (?&lt;=operator) (?: [-*&amp;&lt;&gt;=+!]+ | \(\) | \[\] ) )? 
			)
			\s*(\()
			</string>
			<key>name</key>
			<string>meta.initialization.daedalus</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#block</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.block.daedalus</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_innards</string>
				</dict>
			</array>
		</dict>
		<key>parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.parens.daedalus</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>			
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})</string>
					<key>name</key>
					<string>constant.character.escape.daedalus</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.daedalus</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>daedalus</string>
</dict>
</plist>
